var chai   = require("chai");
var expect = chai.expect;
var gretro = require("../");

var $$ = 15;
var __ =  0;

describe("#copy", function() {
  var canvas = null;
  var src    = null;

  before(function() {
    /*
    __,__,$$,$$,$$,__,__,__,
    __,$$,__,__,__,$$,__,__,
    $$,__,__,__,__,__,$$,__,
    $$,__,__,__,__,__,$$,__,
    $$,__,__,__,__,__,$$,__,
    __,$$,__,__,__,$$,__,__,
    __,__,$$,$$,$$,__,__,__,
    __,__,__,__,__,__,__,__,
    */
    src = new gretro.Canvas(8, 8);
    src.circle(3, 3, 3, $$);
  });

  beforeEach(function() {
    canvas = new gretro.Canvas(8, 8);
  });

  it("should paste other canvas", function() {
    var result = canvas.paste(src, 0, 0, -1);

    expect(canvas.toIndexedColor()).to.eql(new Uint8Array([
      __,__,$$,$$,$$,__,__,__,
      __,$$,__,__,__,$$,__,__,
      $$,__,__,__,__,__,$$,__,
      $$,__,__,__,__,__,$$,__,
      $$,__,__,__,__,__,$$,__,
      __,$$,__,__,__,$$,__,__,
      __,__,$$,$$,$$,__,__,__,
      __,__,__,__,__,__,__,__,
    ]));

    expect(result, "should return self").to.equal(canvas);
  });

  it("masking", function() {
    canvas.paste(src, 0, 0, $$);

    expect(canvas.toIndexedColor()).to.eql(new Uint8Array([
      __,__,__,__,__,__,__,__,
      __,__,__,__,__,__,__,__,
      __,__,__,__,__,__,__,__,
      __,__,__,__,__,__,__,__,
      __,__,__,__,__,__,__,__,
      __,__,__,__,__,__,__,__,
      __,__,__,__,__,__,__,__,
      __,__,__,__,__,__,__,__,
    ]));
  });

  describe("clipping", function() {
    it("left", function() {
      canvas.paste(src, -4, 0, -1);

      expect(canvas.toIndexedColor()).to.eql(new Uint8Array([
        $$,__,__,__,__,__,__,__,
        __,$$,__,__,__,__,__,__,
        __,__,$$,__,__,__,__,__,
        __,__,$$,__,__,__,__,__,
        __,__,$$,__,__,__,__,__,
        __,$$,__,__,__,__,__,__,
        $$,__,__,__,__,__,__,__,
        __,__,__,__,__,__,__,__,
      ]));
    });
    it("left top", function() {
      canvas.paste(src, -4, -4, -1);

      expect(canvas.toIndexedColor()).to.eql(new Uint8Array([
        __,__,$$,__,__,__,__,__,
        __,$$,__,__,__,__,__,__,
        $$,__,__,__,__,__,__,__,
        __,__,__,__,__,__,__,__,
        __,__,__,__,__,__,__,__,
        __,__,__,__,__,__,__,__,
        __,__,__,__,__,__,__,__,
        __,__,__,__,__,__,__,__,
      ]));
    });
    it("top", function() {
      canvas.paste(src, 0, -4, -1);

      expect(canvas.toIndexedColor()).to.eql(new Uint8Array([
        $$,__,__,__,__,__,$$,__,
        __,$$,__,__,__,$$,__,__,
        __,__,$$,$$,$$,__,__,__,
        __,__,__,__,__,__,__,__,
        __,__,__,__,__,__,__,__,
        __,__,__,__,__,__,__,__,
        __,__,__,__,__,__,__,__,
        __,__,__,__,__,__,__,__,
      ]));
    });
    it("right top", function() {
      canvas.paste(src, 4, -4, -1);

      expect(canvas.toIndexedColor()).to.eql(new Uint8Array([
        __,__,__,__,$$,__,__,__,
        __,__,__,__,__,$$,__,__,
        __,__,__,__,__,__,$$,$$,
        __,__,__,__,__,__,__,__,
        __,__,__,__,__,__,__,__,
        __,__,__,__,__,__,__,__,
        __,__,__,__,__,__,__,__,
        __,__,__,__,__,__,__,__,
      ]));
    });
    it("right", function() {
      canvas.paste(src, 4, 0, -1);

      expect(canvas.toIndexedColor()).to.eql(new Uint8Array([
        __,__,__,__,__,__,$$,$$,
        __,__,__,__,__,$$,__,__,
        __,__,__,__,$$,__,__,__,
        __,__,__,__,$$,__,__,__,
        __,__,__,__,$$,__,__,__,
        __,__,__,__,__,$$,__,__,
        __,__,__,__,__,__,$$,$$,
        __,__,__,__,__,__,__,__,
      ]));
    });
    it("right bottom", function() {
      canvas.paste(src, 4, 4, -1);

      expect(canvas.toIndexedColor()).to.eql(new Uint8Array([
        __,__,__,__,__,__,__,__,
        __,__,__,__,__,__,__,__,
        __,__,__,__,__,__,__,__,
        __,__,__,__,__,__,__,__,
        __,__,__,__,__,__,$$,$$,
        __,__,__,__,__,$$,__,__,
        __,__,__,__,$$,__,__,__,
        __,__,__,__,$$,__,__,__,
      ]));
    });
    it("bottom", function() {
      canvas.paste(src, 0, 4, -1);

      expect(canvas.toIndexedColor()).to.eql(new Uint8Array([
        __,__,__,__,__,__,__,__,
        __,__,__,__,__,__,__,__,
        __,__,__,__,__,__,__,__,
        __,__,__,__,__,__,__,__,
        __,__,$$,$$,$$,__,__,__,
        __,$$,__,__,__,$$,__,__,
        $$,__,__,__,__,__,$$,__,
        $$,__,__,__,__,__,$$,__,
      ]));
    });
    it("bottom left", function() {
      canvas.paste(src, -4, 4, -1);

      expect(canvas.toIndexedColor()).to.eql(new Uint8Array([
        __,__,__,__,__,__,__,__,
        __,__,__,__,__,__,__,__,
        __,__,__,__,__,__,__,__,
        __,__,__,__,__,__,__,__,
        $$,__,__,__,__,__,__,__,
        __,$$,__,__,__,__,__,__,
        __,__,$$,__,__,__,__,__,
        __,__,$$,__,__,__,__,__,
      ]));
    });
  });

  describe("error case", function() {
    it("invalid argument", function() {
      canvas.paste({ this: "is not canvas" }, -4, 4, -1);

      expect(canvas.toIndexedColor()).to.eql(new Uint8Array([
        __,__,__,__,__,__,__,__,
        __,__,__,__,__,__,__,__,
        __,__,__,__,__,__,__,__,
        __,__,__,__,__,__,__,__,
        __,__,__,__,__,__,__,__,
        __,__,__,__,__,__,__,__,
        __,__,__,__,__,__,__,__,
        __,__,__,__,__,__,__,__,
      ]));
    });
  });

});
